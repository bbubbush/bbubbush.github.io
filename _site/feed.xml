<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-02-18T02:10:15+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">No pain, no gain</title><entry><title type="html">Prologue</title><link href="http://localhost:4000/book_review/2019/02/18/Book_Review.html" rel="alternate" type="text/html" title="&lt;그림으로 공부하는 오라클구조&gt; Prologue" /><published>2019-02-18T00:00:00+09:00</published><updated>2019-02-18T00:00:00+09:00</updated><id>http://localhost:4000/book_review/2019/02/18/Book_Review</id><content type="html" xml:base="http://localhost:4000/book_review/2019/02/18/Book_Review.html">&lt;p&gt;&lt;img src=&quot;/assets/img/book_review/01_oracle_architecture/prologue_01.png&quot; alt=&quot;그림으로 공부하는 오라클구조 표지&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;신년 계획 중 하나인 “개발자가 개발 못하면 쓰나~” 프로젝트의 일환으로 개발서적을 하나 잡고 챕터별로 정리하여 포스팅을 하려고 한다. 처음 작성하는 포스팅이다 보니 다소 엉성하고 주저리주저리 글을 쓸 지라도 이해해주길 여러분이 이해해주길 바란다. 마치 이 글처럼 ㅎㅎ&lt;/p&gt;</content><author><name>bbubbush</name></author><category term="Book_Review" /><summary type="html"></summary></entry><entry><title type="html">평균구하기</title><link href="http://localhost:4000/algolism/2019/01/13/Algorithm.html" rel="alternate" type="text/html" title="평균구하기" /><published>2019-01-13T00:00:00+09:00</published><updated>2019-01-13T00:00:00+09:00</updated><id>http://localhost:4000/algolism/2019/01/13/Algorithm</id><content type="html" xml:base="http://localhost:4000/algolism/2019/01/13/Algorithm.html">&lt;h4 id=&quot;-평균구하기-&quot;&gt;[ 평균구하기 ]&lt;/h4&gt;
&lt;p&gt;함수를 완성해서 매개변수 array의 평균값을 return하도록 만들어 보세요.
어떠한 크기의 array가 와도 평균값을 구할 수 있어야 합니다.&lt;/p&gt;

&lt;h4 id=&quot;-접근방법-&quot;&gt;[ 접근방법 ]&lt;/h4&gt;
&lt;p&gt;말그대로 평균을 구한다. 총합을 전체 갯수로 나눠서 구했다.&lt;/p&gt;

&lt;h5 id=&quot;재귀를-이용한-형태&quot;&gt;재귀를 이용한 형태&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def average(list):
    if len(list) == 0: return 0
    return sum(list) / len(list)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[ 테스트로 출력해 보기 위한 코드 ]&lt;/p&gt;

&lt;p&gt;list = [5,3,4]&lt;br /&gt;
print(“평균값 : {}”.format(average(list)))&lt;/p&gt;</content><author><name>bbubbush</name></author><category term="Algolism" /><summary type="html">[ 평균구하기 ] 함수를 완성해서 매개변수 array의 평균값을 return하도록 만들어 보세요. 어떠한 크기의 array가 와도 평균값을 구할 수 있어야 합니다.</summary></entry><entry><title type="html">Markdown 이야기</title><link href="http://localhost:4000/tech/2018/07/23/Markdown.html" rel="alternate" type="text/html" title="Markdown 이야기" /><published>2018-07-23T00:00:00+09:00</published><updated>2018-07-23T00:00:00+09:00</updated><id>http://localhost:4000/tech/2018/07/23/Markdown</id><content type="html" xml:base="http://localhost:4000/tech/2018/07/23/Markdown.html">&lt;p&gt;Markdown이란 무엇인가에 대해 설명하기에 먼저 개발자라면 누구나 겪었을 언어인 HTML에 대해 이야기하고자 한다.&lt;/p&gt;

&lt;p&gt;HTML은 Hyper Text Markup Language의 약자로, 말 그대로 ‘마크업 언어’인 셈이다.&lt;/p&gt;

&lt;p&gt;그럼 마크업 언어는 무엇일까? 개발을 하다 보면 흔하게 접하는 단어지만 막상 설명하자면 명쾌하게 정의가 되지 않는다. 평소 자주 사용하는 위키에서는 마크업 언어를 다음과 같이 정의한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;마크업 언어(Markup Language)는 문서가 화면에 표시되는 형식을 나타내거나 데이터의 논리적인 구조를 명시하기 위한 규칙들을 정의한 언어의 일종이다. 데이터를 기술한 언어라는 점에서 프로그래밍 언어와는 차이가 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;거의 다 왔다. 마크다운 언어도 문서를 화면에 표시한다는 점에서는 동일하니 &lt;strong&gt;데이터의 논리적인 구조를 명시&lt;/strong&gt; 한다는 점이 마크업 언어의 특징을 정확하게 나타낸다고 볼 수 있다. 따라서 컴퓨터가 이해하기 쉽고, 계층구조를 통해 데이터의 권한을 다르게 부여할 수 있다.&lt;/p&gt;

&lt;p&gt;반면, 이와같은 특징으로 인해 사람은 한번에 이해하기 힘들다. 각 태그는 시작과 끝이 정확히 쌍을 이뤄야 하고 계층이 다양해질수록 언어의 가독성은 심히 나뻐진다. 이런 불편한 점을 해소하기 위해 등장한 언어가 마크다운이다. 간단한 문법만 익히면 초보자도 금새 능숙하게 다를 수 있으며 작성자 역시 한번에 글의 내용을 이해할 수 있다.&lt;/p&gt;

&lt;p&gt;이 문서 역시 마크다운으로 작성했지만, 내가 한 일이라고는 메모장에 글을 쓰듯 내용을 정리하고 필요한 부분에 약간의 문법만 적용시켰을 뿐이다.&lt;/p&gt;

&lt;p&gt;특히 스터디간 사용할 예정인 git에서는 Document를 ReadMe.md 파일로서 제공하므로 마크다운 언어의 사용을 강제하고 있다. 이 이유만으로도 마크다운문법을 익힐 이유는 충분하다고 생각되어 이 시간을 마련하게 되었다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://likejazz.com/post/91688598730/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4markdown-%EC%9D%B4%EC%95%BC%EA%B8%B0&quot;&gt;참고자료: Markdown 이야기&lt;/a&gt;&lt;/p&gt;</content><author><name>bbubbush</name></author><category term="Tech" /><summary type="html">Markdown이란 무엇인가에 대해 설명하기에 먼저 개발자라면 누구나 겪었을 언어인 HTML에 대해 이야기하고자 한다.</summary></entry><entry><title type="html">Find_Last_Point Algorism</title><link href="http://localhost:4000/algolism/2017/12/14/Find_Last_Point_Algorism.html" rel="alternate" type="text/html" title="Find_Last_Point Algorism" /><published>2017-12-14T00:00:00+09:00</published><updated>2017-12-14T00:00:00+09:00</updated><id>http://localhost:4000/algolism/2017/12/14/Find_Last_Point_Algorism</id><content type="html" xml:base="http://localhost:4000/algolism/2017/12/14/Find_Last_Point_Algorism.html">&lt;h3 id=&quot;문제&quot;&gt;문제&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;직사각형을 만드는 데 필요한 4개의 점 중 3개의 좌표가 주어질 때, 나머지 한 점의 좌표를 구하려고 합니다. 점 3개의 좌표가 들어있는 배열 v가 매개변수로 주어질 때, 직사각형을 만드는 데 필요한 나머지 한 점의 좌표를 return 하도록 solution 함수를 완성해주세요. 단, 직사각형의 각 변은 x축, y축에 평행하며, 반드시 직사각형을 만들 수 있는 경우만 입력으로 주어집니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def solution(v):
    answer = [0,0]
    for i in v:
        answer[0] ^= i[0]
        answer[1] ^= i[1]
    return answer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;x1, x2, y1, y2의 좌표가 각 2개씩 총 8개가 있어야 완성된 직사각형의 좌표를 만들 수 있음을 이용해 입력되지 않은 한쌍을 구하는 문제&lt;/p&gt;

&lt;p&gt;이 풀이는  A ^ A = 0, A ^ 0 = A  을 이용하여 해결&lt;/p&gt;

&lt;!-- &lt;ul&gt;
  
    &lt;li&gt;
      &lt;a href=&quot;/book_review/2019/02/18/Book_Review.html&quot;&gt;&lt;그림으로 공부하는 오라클구조&gt; Prologue&lt;/a&gt;
    &lt;/li&gt;
  
    &lt;li&gt;
      &lt;a href=&quot;/algolism/2019/01/13/Algorithm.html&quot;&gt;평균구하기&lt;/a&gt;
    &lt;/li&gt;
  
    &lt;li&gt;
      &lt;a href=&quot;/tech/2018/07/23/Markdown.html&quot;&gt;Markdown 이야기&lt;/a&gt;
    &lt;/li&gt;
  
    &lt;li&gt;
      &lt;a href=&quot;/algolism/2017/12/14/Find_Last_Point_Algorism.html&quot;&gt;Find_Last_Point Algorism&lt;/a&gt;
    &lt;/li&gt;
  
    &lt;li&gt;
      &lt;a href=&quot;/algolism/2017/12/13/Miro_Algorism.html&quot;&gt;Secret Miro Algorism&lt;/a&gt;
    &lt;/li&gt;
  
    &lt;li&gt;
      &lt;a href=&quot;/algolism/2017/12/12/Palindrome_Algorism.html&quot;&gt;Palindrome Algorism&lt;/a&gt;
    &lt;/li&gt;
  
&lt;/ul&gt; --&gt;</content><author><name>bbubbush</name></author><category term="Algolism" /><summary type="html">문제 직사각형을 만드는 데 필요한 4개의 점 중 3개의 좌표가 주어질 때, 나머지 한 점의 좌표를 구하려고 합니다. 점 3개의 좌표가 들어있는 배열 v가 매개변수로 주어질 때, 직사각형을 만드는 데 필요한 나머지 한 점의 좌표를 return 하도록 solution 함수를 완성해주세요. 단, 직사각형의 각 변은 x축, y축에 평행하며, 반드시 직사각형을 만들 수 있는 경우만 입력으로 주어집니다.</summary></entry><entry><title type="html">Secret Miro Algorism</title><link href="http://localhost:4000/algolism/2017/12/13/Miro_Algorism.html" rel="alternate" type="text/html" title="Secret Miro Algorism" /><published>2017-12-13T00:00:00+09:00</published><updated>2017-12-13T00:00:00+09:00</updated><id>http://localhost:4000/algolism/2017/12/13/Miro_Algorism</id><content type="html" xml:base="http://localhost:4000/algolism/2017/12/13/Miro_Algorism.html">&lt;h3 id=&quot;그냥-비교하여-푼-방법&quot;&gt;그냥 비교하여 푼 방법&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def miro(n, arr1, arr2):
  temp1, temp2 = [], []
  answer = ['' for i in range(n)]
  for i in arr1:
      temp = len(bin(i)[2:]) &amp;lt; n and ('0' * (n-len(bin(i)[2:]))) + bin(i)[2:] or bin(i)[2:]
      temp1.append(temp)
  for i in arr2:
      temp = len(bin(i)[2:]) &amp;lt; n and ('0' * (n-len(bin(i)[2:]))) + bin(i)[2:] or bin(i)[2:]
      temp2.append(temp)

  for i in range(n):
      for j in range(n):
          if temp1[i][j] == '0' and temp2[i][j]  == '0':
              answer[i] += ' '
          else:
              answer[i] += '#'

  return answer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!-- &lt;ul&gt;
  
    &lt;li&gt;
      &lt;a href=&quot;/book_review/2019/02/18/Book_Review.html&quot;&gt;&lt;그림으로 공부하는 오라클구조&gt; Prologue&lt;/a&gt;
    &lt;/li&gt;
  
    &lt;li&gt;
      &lt;a href=&quot;/algolism/2019/01/13/Algorithm.html&quot;&gt;평균구하기&lt;/a&gt;
    &lt;/li&gt;
  
    &lt;li&gt;
      &lt;a href=&quot;/tech/2018/07/23/Markdown.html&quot;&gt;Markdown 이야기&lt;/a&gt;
    &lt;/li&gt;
  
    &lt;li&gt;
      &lt;a href=&quot;/algolism/2017/12/14/Find_Last_Point_Algorism.html&quot;&gt;Find_Last_Point Algorism&lt;/a&gt;
    &lt;/li&gt;
  
    &lt;li&gt;
      &lt;a href=&quot;/algolism/2017/12/13/Miro_Algorism.html&quot;&gt;Secret Miro Algorism&lt;/a&gt;
    &lt;/li&gt;
  
    &lt;li&gt;
      &lt;a href=&quot;/algolism/2017/12/12/Palindrome_Algorism.html&quot;&gt;Palindrome Algorism&lt;/a&gt;
    &lt;/li&gt;
  
&lt;/ul&gt; --&gt;</content><author><name>bbubbush</name></author><category term="Algolism" /><summary type="html">그냥 비교하여 푼 방법</summary></entry><entry><title type="html">Palindrome Algorism</title><link href="http://localhost:4000/algolism/2017/12/12/Palindrome_Algorism.html" rel="alternate" type="text/html" title="Palindrome Algorism" /><published>2017-12-12T00:00:00+09:00</published><updated>2017-12-12T00:00:00+09:00</updated><id>http://localhost:4000/algolism/2017/12/12/Palindrome_Algorism</id><content type="html" xml:base="http://localhost:4000/algolism/2017/12/12/Palindrome_Algorism.html">&lt;h3 id=&quot;재귀를-이용한-형태&quot;&gt;재귀를 이용한 형태&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def longest_palindrom(s):  
    if s[::-1] == s:  
        return len(s)  
    else:  
        return max(longest_palindrom(s[:-1]), longest_palindrom(s[1:]))  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!-- &lt;ul&gt;
  
    &lt;li&gt;
      &lt;a href=&quot;/book_review/2019/02/18/Book_Review.html&quot;&gt;&lt;그림으로 공부하는 오라클구조&gt; Prologue&lt;/a&gt;
    &lt;/li&gt;
  
    &lt;li&gt;
      &lt;a href=&quot;/algolism/2019/01/13/Algorithm.html&quot;&gt;평균구하기&lt;/a&gt;
    &lt;/li&gt;
  
    &lt;li&gt;
      &lt;a href=&quot;/tech/2018/07/23/Markdown.html&quot;&gt;Markdown 이야기&lt;/a&gt;
    &lt;/li&gt;
  
    &lt;li&gt;
      &lt;a href=&quot;/algolism/2017/12/14/Find_Last_Point_Algorism.html&quot;&gt;Find_Last_Point Algorism&lt;/a&gt;
    &lt;/li&gt;
  
    &lt;li&gt;
      &lt;a href=&quot;/algolism/2017/12/13/Miro_Algorism.html&quot;&gt;Secret Miro Algorism&lt;/a&gt;
    &lt;/li&gt;
  
    &lt;li&gt;
      &lt;a href=&quot;/algolism/2017/12/12/Palindrome_Algorism.html&quot;&gt;Palindrome Algorism&lt;/a&gt;
    &lt;/li&gt;
  
&lt;/ul&gt; --&gt;</content><author><name>bbubbush</name></author><category term="Algolism" /><summary type="html">재귀를 이용한 형태</summary></entry></feed>